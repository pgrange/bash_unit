#!/bin/bash
#
#   bash unit testing enterprise edition framework for professionals
#   Copyright (C) 2011-2016 Pascal Grange
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 3 of the License, or
#   (at your option) any later version.
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software Foundation,
#   Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
#
#  https://github.com/pgrange/bash_unit

ESCAPE=$(printf "\033")
NOCOLOR="${ESCAPE}[0m"
RED="${ESCAPE}[91m"
GREEN="${ESCAPE}[92m"
YELLOW="${ESCAPE}[93m"
BLUE="${ESCAPE}[94m"

fail() {
  local MESSAGE=$1
  format "$RED" "FAILURE"
  [[ -z "$MESSAGE" ]] || printf -- "$MESSAGE\n"
  print_stack | grep -v ^$BASH_SOURCE | format "$YELLOW"
  exit 1
}

assert() {
  local assertion=$1
  local message=$2
  local tmp_file=$(mktemp)
  if ! eval "($assertion)" >/dev/null 2>$tmp_file
  then
    message="$message$(cat $tmp_file)"
    rm $tmp_file
    fail "$message"
  else
    rm $tmp_file
  fi
}

assert_fail() {
  local assertion=$1
  local message=$2
  if eval "($assertion)" >/dev/null 2>&1
  then
   fail "$message"
  fi
}

assert_status_code() {
  local expected_status=$1
  local assertion="$2"
  local message="$3"
  local status
  eval "($assertion)" >/dev/null 2>&1 && status=$? || status=$?
  assert_equals $expected_status $status "$message"
}

debug_assert_status_code() {
  local expected_status=$1
  local assertion="$2"
  local message="$3"
  local status
  eval "($assertion)" && status=$? || status=$?
  assert_equals $expected_status $status "$message"
}

assert_equals() {
  local expected=$1
  local actual=$2
  local message=$3
  [[ -z $message ]] || message="$message\n"
  
  if [ "$expected" != "$actual" ]
  then
    fail "$message expected [$expected] but was [$actual]"
  fi
}

assert_not_equals() {
  local unexpected=$1
  local actual=$2
  local message=$3
  [[ -z $message ]] || message="$message\n"

  [ "$unexpected" != "$actual" ] || \
    fail "$message expected different value than [$unexpected] but was the same"
}

fake() {
  local command=$1
  shift
  if [ $# -gt 0 ]
  then
    eval "function $command() { export FAKE_PARAMS=\"\$@\" ; $@ ; }"
  else
    eval "function $command() { echo \"$(cat)\" ; }"
  fi
  export -f $command
}

run_test_suite() {
  local failure=0
  for test in $(set | grep  -E '^test.* ()' | grep -E "$test_pattern" | sed -e 's: .*::')
  do
    (
      local status=0
      declare -F | grep ' setup$' >/dev/null && setup
      (run_test $test) || status=$?
      declare -F | grep ' teardown$' >/dev/null && teardown
      exit $status
    )
    failure=$(( $? || $failure))
  done
  return $failure
}

run_test() {
  set -e
  local TEST=$1
  echo -n "Running $TEST... " | format "$BLUE"
  $TEST && format "$GREEN" "SUCCESS"
}

print_stack() {
  local i=1
  while ! [ -z ${BASH_SOURCE[$i]} ]
  do
    echo ${BASH_SOURCE[$i]}:${BASH_LINENO[$((i-1))]}:${FUNCNAME[$i]}\(\)
    i=$(($i + 1))
  done
}

format() {
  local color=$1
  shift
  if [ -t 1 ] ; then echo -en "$color" ; fi
  if [ $# -gt 0 ]
  then
    echo $*
  else
    cat
  fi
  if [ -t 1 ] ; then echo -en "$NOCOLOR" ; fi
}

usage() {
  echo "$1" >&2
  echo "$0 [-p <pattern1>] [-p <pattern2>]... <test_file1> <test_file2>..." >&2
  echo >&2
  echo "Runs tests in test files that match patterns" >&2
  echo "See https://github.com/pgrange/bash_unit" >&2
  exit 1
}

test_pattern=""
separator=""
while getopts "p:" option
do
  case "$option" in
    p)
      test_pattern="${test_pattern}${separator}${OPTARG}"
      separator="|"
      ;;
    ?|:)
      usage
      ;;
  esac
done
shift $((OPTIND-1))

#check test files exist and is readable
for test_file in "$@"
do
  test -e $test_file || usage "file does not exist: $test_file"
  test -r $test_file || usage "can not read file: $test_file"
done

#run tests received as parameters
failure=0
for test_file in "$@"
do
  echo "Running tests in $test_file"
  (source "$test_file"; run_test_suite)
  failure=$(( $? || $failure))
done
exit $failure
